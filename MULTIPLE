// components/game-layout.tsx
import React, { useEffect, useState } from "react";
import { Player, ActivityEvent } from "../types";
import { Button } from "../components/Button";
import { NavButton } from "../components/NavButton";
import { Star, CalendarCheck } from "react-feather";
import { id } from "../utils/id";
import { addNotification } from "../utils/notifications";
import { showLevelUp } from "../utils/levelUp";

interface GameLayoutProps {
  player: Player;
  setPlayer: React.Dispatch<React.SetStateAction<Player>>;
  onNavigate: (page: string) => void;
  isMobileOpen: boolean;
  setIsMobileOpen: React.Dispatch<React.SetStateAction<boolean>>;
}

const GameLayout: React.FC<GameLayoutProps> = ({
  player,
  setPlayer,
  onNavigate,
  isMobileOpen,
  setIsMobileOpen,
}) => {
  const [activePage, setActivePage] = useState("");

  useEffect(() => {
    try {
      const initial =
        (typeof window !== "undefined" && window.location.hash?.slice(1)) ||
        (typeof window !== "undefined" && localStorage.getItem("activePage")) ||
        "profile";
      setActivePage(initial);

      const onHashChange = () => {
        const p = window.location.hash.slice(1) || "profile";
        setActivePage(p);
      };
      window.addEventListener("hashchange", onHashChange);
      return () => window.removeEventListener("hashchange", onHashChange);
    } catch (e) {
      console.error("Failed to init/sync activePage:", e);
    }
  }, []);

  useEffect(() => {
    if (!activePage) return;
    try {
      if (typeof window !== "undefined") {
        localStorage.setItem("activePage", activePage);
        if (window.location.hash.slice(1) !== activePage) {
          window.location.hash = activePage;
        }
      }
    } catch (e) {
      console.error("Failed to persist activePage:", e);
    }
  }, [activePage]);

  const pushActivity = (evt: ActivityEvent) => {
    setPlayer((prev) => ({
      ...prev,
      activityLog: [...(prev.activityLog || []), evt],
    }));
  };

  const handleCompleteQuest = () => {
    const activeQuest = player.activeQuest;
    if (!activeQuest) return;

    try {
      const finished = activeQuest;

      // Log completion (xpChange recorded here; actual XP was awarded in QuestTimer)
      const type = "penalty" in finished ? "daily-completed" : "quest-completed";
      pushActivity({
        id: id(),
        date: new Date().toISOString(),
        type,
        refId: finished.id,
        title: finished.title,
        xpChange: finished.xp,
      });

      // Track lifetime XP without touching current XP (QuestTimer already updated current XP)
      setPlayer((prev) => ({
        ...prev,
        lifetimeXp: (prev.lifetimeXp || 0) + finished.xp,
      }));

      // Additional logic for completed quest handling
      // setCompletedQuest(finished);
      // if ("statIncreases" in finished && finished.statIncreases) {
      //   setStatIncreases(finished.statIncreases);
      // } else {
      //   setStatIncreases({});
      // }

      // setShowQuestComplete(true);
      setActiveQuest(null);
      // setTimeRemaining(null);
    } catch (error) {
      console.error("Error completing quest:", error);
      addNotification("Error completing quest", "error");
    }
  };

  const handleCancelQuest = () => {
    const activeQuest = player.activeQuest;
    if (!activeQuest) return;

    try {
      const penalty = activeQuest.penalty || 0;
      const type = "penalty" in activeQuest ? "daily-skipped" : "quest-skipped";

      setPlayer((prev) => ({
        ...prev,
        xp: Math.max(0, prev.xp - penalty),
        activityLog: [
          ...(prev.activityLog || []),
          {
            id: id(),
            date: new Date().toISOString(),
            type,
            refId: activeQuest.id,
            title: activeQuest.title,
            xpChange: -penalty,
          },
        ],
      }));

      setActiveQuest(null);
      // setTimeRemaining(null);
    } catch (error) {
      console.error("Error cancelling quest:", error);
      addNotification("Error cancelling quest", "error");
    }
  };

  const handleNavigate = (pageId: string) => {
    try {
      onNavigate(pageId);
      if (typeof window !== "undefined") {
        window.location.hash = pageId;
        localStorage.setItem("activePage", pageId);
      }
      if (isMobileOpen) {
        setIsMobileOpen(false);
      }
    } catch (error) {
      console.error("Navigation error:", error);
    }
  };

  return (
    <div>
      <nav className="p-2 space-y-1">
        <NavButton page="profile" icon={Star} label="Profile" onClick={() => handleNavigate("profile")} />
        <NavButton page="quests" icon={Star} label="Quests" onClick={() => handleNavigate("quests")} />
        <NavButton
          page="daily-missions"
          icon={CalendarCheck}
          label="Daily Missions"
          onClick={() => handleNavigate("daily-missions")}
        />
        <NavButton
          page="create-quest"
          icon={Star}
          label="Create Quest"
          onClick={() => handleNavigate("create-quest")}
        />
        <NavButton
          page="create-daily-missions"
          icon={CalendarCheck}
          label="Create Daily Missions"
          onClick={() => handleNavigate("create-daily-missions")}
        />
      </nav>
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-primary font-audiowide glow-text">QUESTS</h1>
        <div className="flex items-center gap-2">
          <div className="text-white/70 font-electrolize hidden sm:block">
            {player.completedQuests} / {player.totalQuests} Completed
          </div>
          <Button
            onClick={() => handleNavigate("create-quest")}
            className="bg-primary/20 hover:bg-primary/30 text-primary rounded-none border border-primary/30 transition-colors tracking-wider btn-primary"
          >
            CREATE QUEST
          </Button>
        </div>
      </div>
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-primary font-audiowide glow-text">DAILY MISSIONS</h1>
        <div className="flex items-center gap-2">
          <div className="text-white/70 font-electrolize hidden sm:block">
            {player.dailyQuests.filter((q) => q.completed).length} / {player.dailyQuests.length} Completed
          </div>
          <Button
            onClick={() => handleNavigate("create-daily-missions")}
            className="bg-primary/20 hover:bg-primary/30 text-primary rounded-none border border-primary/30 transition-colors tracking-wider btn-primary"
          >
            CREATE MISSION
          </Button>
        </div>
      </div>
    </div>
  );
};

export default GameLayout;
